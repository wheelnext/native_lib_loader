cmake_minimum_required(VERSION 3.26.4 FATAL_ERROR)

project({{ library_name }} VERSION 0.0.1 LANGUAGES C)

# For simplicity in testing, always export symbols on Windows
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

add_library({{ library_name }} SHARED example.c)
target_include_directories({{ library_name }} PUBLIC "$<INSTALL_INTERFACE:include>" "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>")

include(GNUInstallDirs)
install(
  TARGETS {{ library_name }}
  DESTINATION ${CMAKE_INSTALL_LIBDIR}
  EXPORT ${PROJECT_NAME}-exports
)
install(
  FILES example.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

include(CMakePackageConfigHelpers)

foreach(tree_type BUILD INSTALL)
  if(tree_type STREQUAL "BUILD")
    set(install_location ".")
  else()
    set(install_location "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
  endif()

  set(build_location "${PROJECT_BINARY_DIR}/${install_location}")

  write_basic_package_version_file(
    "${build_location}/${PROJECT_NAME}-config-version.cmake"
    VERSION ${CMAKE_PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion)
  configure_package_config_file("${CMAKE_CURRENT_LIST_DIR}/cmake/config.cmake.in"
                                "${build_location}/${PROJECT_NAME}-config.cmake"
                                INSTALL_DESTINATION "${install_location}")


  if(tree_type STREQUAL "BUILD")
    export(EXPORT ${PROJECT_NAME}-exports
        FILE "${PROJECT_NAME}-targets.cmake"
        NAMESPACE ${PROJECT_NAME}::)
  else()
    install(DIRECTORY "${build_location}/" DESTINATION "${install_location}")
    install(EXPORT ${PROJECT_NAME}-exports
            DESTINATION "${install_location}"
            FILE "${PROJECT_NAME}-targets.cmake"
            NAMESPACE ${PROJECT_NAME}::)
  endif()
endforeach()
